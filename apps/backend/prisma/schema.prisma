generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  name          String
  phone         String?
  avatar        String?
  isAdmin       Boolean    @default(false)
  role          UserRole   @default(CUSTOMER)
  utilCoins     Int        @default(0)
  referralCode  String     @unique
  referredBy    String?
  referralCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  GamePlay      GamePlay[]
  Order         Order[]
  store         Store?
  users         User?      @relation("usersTousers", fields: [referredBy], references: [id])
  other_users   User[]     @relation("usersTousers")
  wallet        Wallet?

  @@map("users")
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("wallets")
}

model Store {
  id          String    @id @default(uuid())
  name        String
  description String?
  logo        String?
  banner      String?
  ownerId     String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Order       Order[]
  products    Product[]
  owner       User      @relation(fields: [ownerId], references: [id])

  @@map("stores")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  images      String[]
  attributes  Json?
  storeId     String
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  store       Store       @relation(fields: [storeId], references: [id])

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  icon        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model GamePlay {
  id        String   @id
  userId    String
  reward    Int
  playedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id])
}

model Order {
  id              String      @id
  customerId      String
  storeId         String
  total           Float
  status          OrderStatus @default(PENDING)
  stripeSessionId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  users           User        @relation(fields: [customerId], references: [id])
  stores          Store       @relation(fields: [storeId], references: [id])
  OrderItem       OrderItem[]
}

model OrderItem {
  id        String   @id
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime
  Order     Order    @relation(fields: [orderId], references: [id])
  products  Product  @relation(fields: [productId], references: [id])
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
